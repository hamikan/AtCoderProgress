// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @db.Text @map("refresh_token")
  accessToken       String? @db.Text @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @db.Text @map("id_token")
  sessionState      String? @map("session_state")

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  atcoderId     String?      @unique @map("atcoder_id")

  accounts      Account[]
  sessions      Session[]
  submissions   Submission[]
  solutions     Solution[]
  createdTags   Tag[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Submission {
  id             Int      @id
  epochSecond    Int      @map("epoch_second")
  problemId      String   @map("problem_id")
  contestId      String   @map("contest_id")
  userId         String
  language       String
  point          Float
  length         Int
  result         String
  executionTime  Int?     @map("execution_time")

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem        Problem  @relation(fields: [problemId], references: [id], onDelete: Restrict)

  @@map("submissions")
}

model Problem {
  id                  String       @id
  contestId           String       @map("contest_id")
  problemIndex        String       @map("problem_index")
  name                String
  difficulty          Int?
  totalSolutionsCount Int          @default(0)
  
  submissions         Submission[]
  solutions           Solution[]

  @@unique([contestId, problemIndex])
  @@index([contestId])
  @@map("problems")
}

model Solution {
  id        String         @id @default(cuid())
  userId    String?        @map("user_id")
  problemId String         @map("problem_id")
  content   String?        @db.Text
  isPublic  Boolean        @default(false) @map("is_public")
  status    String
  solvedAt  DateTime?      @map("solved_at")
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  tags      SolutionTag[]

  user      User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  problem   Problem        @relation(fields: [problemId], references: [id], onDelete: Restrict)
  
  @@index([userId])
  @@index([problemId])
  @@map("solutions")
}

model Tag {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  isOfficial  Boolean       @default(false) @map("is_official")
  createdById String?       @map("created_by_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  
  creator     User?         @relation(fields: [createdById], references: [id], onDelete: SetNull)
  solutions   SolutionTag[]

  @@map("tags")
}

model SolutionTag {
  solutionId String   @map("solution_id")
  tagId      Int      @map("tag_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  solution   Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([solutionId, tagId])
  @@map("solution_tags")
}